# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main, workflow]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  cypress-run:
    env:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432
    runs-on: ubuntu-latest
    container: cypress/included:3.2.0
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Use Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Prisma migrate deploy
        run: npx prisma migrate deploy

      - name: Cypress run
        uses: cypress-io/github-action@v2.9.7
        with:
          build: npm run build
          start: npm start

      - name: Prisma reset
        run: npm run prisma:reset

  jest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm install

      - name: Component tests
        run: npm run test

  deploy:
    # needs: [cypress-run, jest]
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout master
        uses: actions/checkout@main
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Build container image
        run: docker build -t registry.digitalocean.com/todo-app312/tictactoe:$(echo $GITHUB_SHA | head -c7) .

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/todo-app312/tictactoe:$(echo $GITHUB_SHA | head -c7)
      # --------------------
      - name: Update deployment file
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7) 
          sed -i 's|<IMAGE>|registry.digitalocean.com/todo-app312/tictactoe:'${TAG}'|' $GITHUB_WORKSPACE/templates/deployment.yaml
          sed -i 's|<DATABASE_URL>|'${{ secrets.DATABASE_URL }}'|' $GITHUB_WORKSPACE/config/deployment.yml

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 todo-production

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/templates/deployment.yaml

      - name: Set up load balancer
        run: kubectl apply -f $GITHUB_WORKSPACE/templates/service.yaml

      - name: Verify deployment
        run: kubectl rollout status deployment/tictactoe-app
